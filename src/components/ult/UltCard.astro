---
import { apiCall, tryConnection } from "../../helpers/index";
import type { UltType } from "../../types";
import ErrorDisplay from "../ErrorDisplay.astro";
import CardFooter from "./card/CardFooter.astro";
import CardHeader from "./card/CardHeader.astro";

export interface Props {
  ult: UltType;
}

const { ult } = Astro.props;
const { message, _id, user } = ult;

const connected = await tryConnection();
const { data, error, code } =
  connected !== true ? connected : await apiCall(`/user/id/${user}`);
---

<div class="link-card">
  {
    !error ? (
      <a href={`/ult/${_id}`}>
        <CardHeader user={data} />
        <p>{message}</p>
        <CardFooter ult={ult} />
      </a>
    ) : (
      <ErrorDisplay message={data} code={code} />
    )
  }
</div>

<style>
  .link-card {
    display: flex;
    padding: 0.15rem;
    margin: 10px 0;
    background-color: white;
    background-image: var(--accent-gradient);
    background-size: 400%;
    border-radius: 0.5rem;
    background-position: 100%;
    transition: background-position 0.6s cubic-bezier(0.22, 1, 0.36, 1);
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1),
      0 2px 4px -2px rgba(0, 0, 0, 0.1);
  }
  .link-card > a {
    display: flex;
    flex-direction: column;
    width: 100%;
    text-decoration: none;
    padding: 20px;
    border-radius: 0.35rem;
    color: #111;
    background-color: white;
  }
  .link-card:is(:hover, :focus-within) {
    background-position: 0;
  }
  .link-card:is(:hover, :focus-within) h2 {
    color: rgb(var(--accent));
  }
</style>
